"""" PLUGINS

""" Vim-plug BEGIN
call plug#begin('~/.vim/plugged')

""" PLUGIN LIST
" extensible interface for searching and displaying lists of information
Plug 'Shougo/denite.nvim'
" mru sources for denite
Plug 'Shougo/neomru.vim'
" inhance netrw
Plug 'tpope/vim-vinegar'
" filetree explorer
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
" git status flags on NerdTree
" Plug 'Xuyuanp/nerdtree-git-plugin'
" git wrapper
Plug 'tpope/vim-fugitive'
" show a git diff in the 'gutter'
Plug 'airblade/vim-gitgutter'
" fuzzy file finder
" plugInstall and PlugUpdate will clone fzf in ~/.fzf and run the install script
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
" use <tab> for insert mode completions
"Plug 'ervandew/supertab'
" comment functions
Plug 'scrooloose/nerdcommenter'
" simple mappings for quoting/parenthesizing
Plug 'tpope/vim-surround'
" remap . in a way that plugins can tap into it
Plug 'tpope/vim-repeat'
" vim motion on speed
Plug 'easymotion/vim-easymotion'
" enhance f and t commands
Plug 'rhysd/clever-f.vim'
" insert or delete brackets, parens, quotes in pair
Plug 'jiangmiao/auto-pairs'
" molokai colorscheme
"Plug 'tomasr/molokai'
" oceanic-next colorscheme
"Plug 'mhartington/oceanic-next'
" monokai inspired colorscheme
Plug 'patstockwell/vim-monokai-tasty'
" vim plugin for ack
Plug 'mileszs/ack.vim'
" vim plugin for the silver searcher
Plug 'rking/ag.vim'
" expand html abbreviations
Plug 'mattn/emmet-vim'
" add indent guides
Plug 'nathanaelkane/vim-indent-guides'
" add status/tabline
Plug 'bling/vim-airline'
" themes for airline
Plug 'vim-airline/vim-airline-themes'
" highlight CSS in javascript template strings
Plug 'styled-components/vim-styled-components', { 'branch': 'main' }
" transform plain css to JSX inline styles and vise versa
Plug 'isomoar/vim-css-to-inline'
" a collection of language packs for Vim
"Plug 'sheerun/vim-polyglot'
" expand javascript support
Plug 'pangloss/vim-javascript'
" react jsx syntax highlighting and indenting
Plug 'mxw/vim-jsx'
" better json for vim
Plug 'elzr/vim-json'
" yet Another JavaScript Syntax file for Vim
"Plug 'othree/yajs.vim'
" syntax for javascript libraries
Plug 'othree/javascript-libraries-syntax.vim'
" tools for developing with Node.js in vim
Plug 'moll/vim-node'
" css3 syntax
Plug 'hail2u/vim-css3-syntax'
" html5 omnicomplete and syntax
Plug 'othree/html5.vim', {'for': 'html'}
" rust support
Plug 'rust-lang/rust.vim'
" qml syntax highlighting
Plug 'peterhoeg/vim-qml', {'for': 'qml'}
" qt->qrc syntax highlighting
Plug 'edtsft/vim-qrc', {'for': 'qrc'}
" comply with pep8 in python indentation
Plug 'Vimjas/vim-python-pep8-indent', {'for': 'py'}
" black python code formatter
Plug 'ambv/black'
" python folding
Plug 'tmhedberg/simpylfold'
" snippets engine for vim
Plug 'SirVer/ultisnips'
" snippets
Plug 'honza/vim-snippets'
" react code snippets
Plug 'epilande/vim-react-snippets'
" ledger filetype for vim
Plug 'ledger/vim-ledger', {'for': ['ledger', 'ldg', 'dat']}
" up to date php syntax for vim
Plug 'StanAngeloff/php.vim', {'for': 'php'}
" better indent HTML sections in PHP files
Plug 'captbaritone/better-indent-support-for-php-with-html', {'for': 'php'}
" pug template engine syntax highlighting and indention
Plug 'digitaltoad/vim-pug'
" sublime text style multiple selections for Vim
Plug 'terryma/vim-multiple-cursors'
" find and replace text through multiple files
Plug 'brooth/far.vim'
" intellisense engine
Plug 'neoclide/coc.nvim', {'branch': 'release'}
" no-hassle Vim sessions
Plug 'tpope/vim-obsession'
" completion function for function parameters
Plug 'othree/jspc.vim', { 'for': ['javascript', 'javascript.jsx'] }
" navigate seamlessly between vim and tmux splits
Plug 'christoomey/vim-tmux-navigator'
" restore FocusGained and FocusLost autocommand events when using vim inside Tmux
Plug 'tmux-plugins/vim-tmux-focus-events'
" easily interact with tmux from vim
Plug 'benmills/vimux'
" browse cheat sheet from cheat.sh directly from vim
Plug 'dbeniamine/cheat.sh-vim'
" a Filetype plugin for csv files
Plug 'chrisbra/csv.vim'
" updates tags files automatically when saving
"Plug 'craigemery/vim-autotag'

""" Vim-plug END
call plug#end()


"""" SETTINGS

""" GENERAL
"" Basic
syntax on
syntax enable
set nocompatible	" be iMproved
filetype on
set modelines=0   "CVE-2007-2438
set backspace=2   "more powerful backspacing
" don't write backup file if vim is being called by "crontab -e"
autocmd BufWrite /private/tmp/crontab.* set nowritebackup
" don't write backup file if vim is being called by "chpass"
autocmd BufWrite /private/etc/pw.* set nowritebackup
set encoding=utf8
" disable automatic commenting
autocmd FileType * set fo-=c fo-=r fo-=o
"" Netrw
let g:netrw_winsize = 30
let g:netrw_liststyle=3
autocmd FileType netrw setl bufhidden=wipe
"" Completion
set complete=.,b,u,]
set completeopt=longest,menuone
"" Tabing
set expandtab
set tabstop=2
set shiftwidth=2
" python
autocmd FileType python setlocal sw=4 ts=4
"" Searching
set hlsearch
set incsearch
set ignorecase
set smartcase
"" Snippets
set rtp+=./custom-snippets/
"" Visuals
" for vim 7
set t_Co=256
" for vim 8
let &t_8f = "\<Esc>[38:2:%lu:%lu:%lum"
let &t_8b = "\<Esc>[48:2:%lu:%lu:%lum"
if (has("termguicolors"))
  set termguicolors
endif
" theme
let g:vim_monokai_tasty_italic = 1
colorscheme vim-monokai-tasty
set background=dark
set mouse=a
set number
set relativenumber
set cursorline
" highlight number on cursorline
hi LineNr term=bold ctermfg=237 ctermbg=NONE gui=bold guifg=#3a3a3a guibg=NONE
hi clear CursorLine
augroup CLClear
  autocmd! ColorScheme * hi clear CursorLine
augroup END
hi CursorLineNr term=bold ctermfg=Yellow gui=bold guifg=Yellow
" prevent bad experience for coc.nvim diagnostic messages when it's default 4000
set updatetime=300
" better display for coc.nvim messages
"set cmdheight=2
" default diff
set diffopt+=vertical
" open folds by default
set foldlevel=99

""" MAPPINGS
"" General
" leader
nnoremap <space> <nop>
let mapleader = "\<space>"
" local leader
let maplocalleader = "\\"
" better escape
inoremap jk <esc>
" apply mapping
nnoremap Q @q
vnoremap Q :norm @q<CR>
" increase number
nnoremap <c-i> <c-a>
" folding
nnoremap zz za
nnoremap za zA
nnoremap zo zR
nnoremap zc zM
nnoremap <leader>fs :set foldmethod=syntax<CR>
nnoremap <leader>fi :set foldmethod=indent<CR>
nnoremap z{ zfi{
nnoremap z[ zfi[
" better completion (uncomment if not using a plugin)
"inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
"inoremap <expr><CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" better movements between splits
noremap <leader>j <C-W>j
noremap <leader>jj <C-W>j
noremap <leader>k <C-W>k
noremap <leader>kk <C-W>k
noremap <leader>h <C-W>h
noremap <leader>hh <C-W>h
noremap <leader>l <C-W>l
noremap <leader>ll <C-W>l
" move right in insert mode
inoremap <C-l> <C-o>a
" split resize
nnoremap <leader>= <C-W>=
nnoremap <leader>> <C-W>>
nnoremap <leader>< <C-W><
nnoremap <leader>+ <C-W>+
nnoremap <leader>- <C-W>-
" split zoom
noremap <leader>zz <c-w>_ \| <c-w>\|
noremap <leader>zi <c-w>_ \| <c-w>\|
noremap <leader>zo <c-w>=
" save file name to clipboard
nnoremap <leader>ycp :let @* = expand("%")<CR>
" quick open
nnoremap <leader>ss :vsplit<CR>
nnoremap <leader>sv :vsplit<CR>
nnoremap <leader>sh :split<CR>
nnoremap <leader>gf :vertical wincmd f<CR>
nnoremap <leader>nt :NERDTree<CR>
nnoremap <leader>ak :Ack<space>
nnoremap <leader>ag :Ag<space>
" tabs
nnoremap <leader>tn :tabnew<CR>
nnoremap <leader>tc :tabclose<CR>
" remove highlight
nnoremap <leader>nh :nohlsearch<CR>
" toggle preview window
nnoremap <leader>tpr :call TogglePreview()<CR>
" toggle relative numbers
nnoremap <leader>trn :call ToggleRelativeNumbers()<CR>
" strip trailing whitespaces
nnoremap <leader>stw :call StripTrailingWhitespaces()<CR>
" buffers
nnoremap <leader>bl :bn<CR>
nnoremap <leader>Bl :bn!<CR>
nnoremap <leader>bn :bn<CR>
nnoremap <leader>Bn :bn!<CR>
nnoremap <leader>bh :bp<CR>
nnoremap <leader>Bh :bp!<CR>
nnoremap <leader>bp :bp<CR>
nnoremap <leader>Bp :bp!<CR>
nnoremap <leader>bs :buffers<CR>
nnoremap <leader>bb :buffers<CR>:buffer<Space>
nnoremap <leader>Bb :buffers<CR>:buffer!<Space>
nnoremap <leader>bd :bd<CR>
nnoremap <leader>Bd :bd!<CR>
nnoremap <leader>ba :1,1000 bd!<CR>
nnoremap <leader>bq :bp <BAR> bd #<CR>
nnoremap <leader>Bq :bp! <BAR> bd! #<CR>
" edit new buffer
nnoremap <leader>en :enew<CR>
nnoremap <leader>En :enew!<CR>
nnoremap <leader>ef :e<Space>
nnoremap <leader>ee :e<Space>
" edit/save vimrc
nnoremap <leader>ve :edit $MYVIMRC<CR>
nnoremap <leader>vrc :edit $HOME/.vimrc<CR>
nnoremap <leader>Ve :edit! $MYVIMRC<CR>
nnoremap <leader>Vrc :edit! $HOME/.vimrc<CR>
nnoremap <leader>vs :source $MYVIMRC<CR>:nohlsearch<CR>
" edit/save other config files
nnoremap <leader>zrc :edit $HOME/.zshrc<CR>
nnoremap <leader>Zrc :edit! $HOME/.zshrc<CR>
nnoremap <leader>trc :edit $HOME/.tmux.conf<CR>
nnoremap <leader>Trc :edit! $HOME/.tmux.conf<CR>
" quit a file
nnoremap <leader>q :q<CR>
nnoremap <leader>Q :q!<CR>
" save a file
nnoremap <leader>w :w<CR>
nnoremap <leader>ww :w<CR>
inoremap <C-S> <Esc>:w<cr>i
" save then quit a file
nnoremap <leader>wq :wq<CR>
nnoremap <leader>Wq :wq!<CR>
" add line without changing mode or position
nnoremap <leader>o m`o<Esc>``
nnoremap <leader>O m`O<Esc>``
" yank text to the clipboard
noremap <leader>y "+y
noremap <leader>yy "+Y
" preserve indentation while pasting text from the OS X clipboard
noremap <leader>p :set paste<CR>:put  +<CR>:set nopaste<CR>
" preserve visual selection after indenting
vmap > >gv
vmap < <gv
"" Fzf mappings
nnoremap <leader><tab> :Files<CR>
nnoremap <leader>fzf :Files<CR>
nnoremap <leader>fzb :Buffers<CR>
nnoremap <leader>fzc :Commits<CR>
"" Fugitive mappings
nnoremap <leader>gs :Gstatus<CR>
nnoremap <leader>gw :Gwrite<CR>
nnoremap <leader>gr :Gread<CR>
nnoremap <leader>gc :Gcommit<CR>
nnoremap <leader>gd :Gdiff<CR>
nnoremap <leader>gmv :Gmove<space>
nnoremap <leader>gb :Git branch<Space>
nnoremap <leader>gl :Git blame<CR>
nnoremap <leader>go :Git checkout<Space>
nnoremap <leader>glc :Glog -- %<CR>
nnoremap <leader>gla :Glog<CR>
"" Vimux mappings
nnoremap <leader>vp :VimuxPromptCommand<CR>
nnoremap <leader>vl :VimuxRunLastCommand<CR>
nnoremap <leader>vi :VimuxInspectRunner<CR>
nnoremap <leader>vz :VimuxZoomRunner<CR>
"" Denite mappings
" inner mappings
autocmd FileType denite call s:denite_my_settings()
function! s:denite_my_settings() abort
  nnoremap <silent><buffer><expr> <CR>
  \ denite#do_map('do_action')
  nnoremap <silent><buffer><expr> o
  \ denite#do_map('do_action')
  nnoremap <silent><buffer><expr> v
  \ denite#do_map('do_action:vsplit')
  nnoremap <silent><buffer><expr> h
  \ denite#do_map('do_action:split')
  nnoremap <silent><buffer><expr> p
  \ denite#do_map('do_action', 'preview')
  nnoremap <silent><buffer><expr> d
  \ denite#do_map('do_action', 'delete')
  nnoremap <silent><buffer><expr> q
  \ denite#do_map('quit')
  nnoremap <silent><buffer><expr> i
  \ denite#do_map('open_filter_buffer')
  nnoremap <silent><buffer><expr> <Space>
  \ denite#do_map('toggle_select').'j'
endfunction
" filter
autocmd FileType denite-filter call s:denite_filter_my_settings()
function! s:denite_filter_my_settings() abort
  imap <silent><buffer> <C-o> <Plug>(denite_filter_quit)
endfunction
" buffers
nnoremap <leader>db :Denite buffer<CR>
" file search
nnoremap <leader>df :DeniteProjectDir file/rec<CR>
" denite content search
nnoremap <leader>da :DeniteProjectDir grep<CR>
" cursor word
nnoremap <leader>dj :DeniteCursorWord grep<CR>
" registers
nnoremap <leader>dr :Denite register<CR>
" mru
nnoremap <leader>dm :Denite file_mru<CR>
"" Coc.nvim mappings
" use <tab> for trigger completion and navigate to next complete item
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"
" Use <cr> and <c-space> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm() : "\<C-g>u\<CR>"
inoremap <silent><expr> <C-SPACE> pumvisible() ? coc#_select_confirm() : "\<C-g>u\<CR>"
" formatting
vmap <leader>f <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)
nnoremap <leader>f :call CocAction('format')<CR>
" error navigation
nnoremap <leader>erp <Plug>(coc-diagnostic-prev)
nnoremap <leader>ern <Plug>(coc-diagnostic-next)
" remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gt <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
nmap <silent> gb :b#<CR>
nnoremap <leader>cf :call CocAction('fold', <f-args>)<CR>
" organize imports
nnoremap <leader>co :call CocAction('runCommand', 'editor.action.organizeImport')<CR>
" use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>
" rename current word
nmap <leader>rn <Plug>(coc-rename)
" rename current file
nnoremap <leader>rnf :CocCommand workspace.renameCurrentFile<CR>
" use <C-j> for select text for visual placeholder of snippet.
vmap <C-j> <Plug>(coc-snippets-select)
" use <C-j> for jump to next placeholder, it's default of coc.nvim
let g:coc_snippet_next = '<c-j>'
" use <C-k> for jump to previous placeholder, it's default of coc.nvim
let g:coc_snippet_prev = '<c-k>'
" open Coc.nvim config
nnoremap <leader>crc :CocConfig<CR>

""" FUNCTIONS
"" General
" toggle preview window
function! TogglePreview()
  if (&completeopt =~ '.*preview.*')
    execute "set completeopt-=preview"
  else
    execute "set completeopt+=preview"
  endif
endfunction
" toggle between number and relativenumber
function! ToggleRelativeNumbers()
  if(&relativenumber == 1)
    set norelativenumber
    set number
  else
    set relativenumber
  endif
endfunc
" strips trailing whitespace at the end of files.
function! StripTrailingWhitespaces()
  " save last search & cursor position
  let _s=@/
  let l = line(".")
  let c = col(".")
  %s/\s\+$//e
  let @/=_s
  call cursor(l, c)
endfunction
"" Coc.nvim functions
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

""" PLUGIN OPTIONS
"" Indent guides options
let g:indent_guides_auto_colors = 0
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd ctermbg=NONE guibg=NONE
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=232 guibg=#080808
nnoremap <leader>ig :IndentGuidesToggle<CR>
"" Airline options
let g:airline_theme='monokai_tasty'
"let g:airline_theme='luna'
let g:airline_powerline_fonts = 1
" set the filename section
let g:airline_section_c = '%t'
" set the line number section
let g:airline_section_z = airline#section#create(['windowswap', '%3p%% ', 'linenr', ':%3v'])
"" JSX options
" allow JSX in normal JS files
let g:jsx_ext_required = 0
"" Ledger options
let g:ledger_align_at = 60
let g:ledger_decimal_sep = '.'
let g:ledger_default_commodity = 'EUR'
let g:ledger_commodity_before = 0
let g:ledger_commodity_sep = ' '
augroup ledger
  autocmd!
  autocmd FileType ledger set foldmethod=syntax
  autocmd FileType ledger nnoremap <c-d> "=strftime("%Y-%m-%d")<CR>P
  autocmd FileType ledger inoremap <c-d> <Esc>"=strftime("%Y-%m-%d")<CR>Pa
  autocmd FileType ledger inoremap <silent><s-Tab> <c-x><c-o>
  autocmd FileType ledger vnoremap <silent><buffer><TAB> :LedgerAlign<CR>
  autocmd FileType ledger inoremap <silent><buffer><c-a> <Esc>:call ledger#align_amount_at_cursor()<CR>
  autocmd FileType ledger noremap { ?^\d<CR>
  autocmd FileType ledger noremap } /^\d<CR>
  autocmd FileType ledger noremap <silent><buffer><c-t> :call ledger#transaction_state_toggle(line('.'), ' *?!')<CR>
  autocmd FileType ledger nnoremap <silent><buffer><localleader>d <Esc>:call ledger#transaction_date_set(line('.'), 'auxiliary')<CR>
augroup END
"" Emmet options
let g:user_emmet_settings = {
      \  'javascript.jsx' : {
      \      'extends' : 'jsx',
      \  },
      \}
let g:user_emmet_leader_key=','
"" Supertab options
" set default to scroll down the list
let g:SuperTabDefaultCompletionType = "<c-n>"
" close the preview window when you're not using it
let g:SuperTabClosePreviewOnPopupClose = 1
"" Ultisnips options
let g:UltiSnipsExpandTrigger="<C-e>"
"" Prettier options
command! -nargs=0 Prettier :CocCommand prettier.formatFile
"" Fzf options
let $FZF_DEFAULT_COMMAND = 'ag --ignore node_modules --ignore target -g ""'
"" Denite options
" change file/rec command
call denite#custom#var('file/rec', 'command',
      \ ['ag', '--follow', '--nocolor', '--nogroup', '-g', ''])
" use ag for content search
call denite#custom#var('grep', 'command', ['ag'])
call denite#custom#var('grep', 'default_opts',
      \ ['-i', '--vimgrep'])
call denite#custom#var('grep', 'recursive_opts', [])
call denite#custom#var('grep', 'pattern_opt', [])
call denite#custom#var('grep', 'separator', ['--'])
call denite#custom#var('grep', 'final_opts', [])
"" Coc.nvim options
" close preview window when completion is done.
autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif
" default extensions
let g:coc_global_extensions = ['coc-word', 'coc-highlight', 'coc-tsserver', 'coc-eslint',
      \'coc-prettier', 'coc-json', 'coc-css', 'coc-snippets', 'coc-ultisnips', 'coc-rls', 'coc-pyright']
