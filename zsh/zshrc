##### HE: ZSHRC

#### PLUGIN MANAGER

# Brew completion
if type brew &>/dev/null
then
  FPATH="$(brew --prefix)/share/zsh/site-functions:${FPATH}"

  autoload -Uz compinit
  compinit
fi

### OH-MY-ZSH
## Path to oh-my-zsh installation
export ZSH=$HOME/.oh-my-zsh

## Plugin list
plugins=(git macos extract z web-search colored-man-pages)
plugins+=(zsh-autosuggestions zsh-syntax-highlighting)

## Source oh-my-zsh
source $ZSH/oh-my-zsh.sh

#### USER

### PATH
export PATH="/usr/local/bin:/usr/local/sbin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:$HOME/bin"
# add rust to path
export PATH=$PATH:$HOME/.
# add rust to path
export PATH="$HOME/.cargo/bin:$PATH"
# add nvm to path
export NVM_DIR="$HOME/.nvm"
# React Native
export ANDROID_HOME=$HOME/Library/Android/sdk
export PATH=$PATH:$ANDROID_HOME/emulator
export PATH=$PATH:$ANDROID_HOME/tools
export PATH=$PATH:$ANDROID_HOME/tools/bin
export PATH=$PATH:$ANDROID_HOME/platform-tools
# Poetry
export PATH=$PATH:$HOME/.local/bin

### CONFIGS
# wsl config
if [ -f /proc/version ]; then
  if [[ "$(< /proc/version)" == *@(Microsoft|Linux)* ]]; then
    source $HOME/.dotfiles/zsh/windows.zshrc
  fi
fi
# macos config
if [ "$(uname 2> /dev/null)" != "Linux" ]; then
  source $HOME/.dotfiles/zsh/macos.zshrc
fi
# linux config
if [ "$(uname 2> /dev/null)" == "Linux" ]; then
  source $HOME/.dotfiles/zsh/linux.zshrc
fi
# local config
if [ -f $HOME/.dotfiles/zsh/local.zshrc ]; then
 source $HOME/.dotfiles/zsh/local.zshrc
fi
# fzf
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
# rust
[ -s "$HOME/.cargo" ] && source $HOME/.cargo/env
# zsh autocompletion
autoload -Uz compinit && compinit
# load pyenv
eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"
export PYENV_VIRTUALENV_DISABLE_PROMPT=1

### ALIAS
alias c="clear"
alias vim="nvim"
alias v="nvim"
alias nv="nvim"
alias ts="task"
alias t="tmux attach || tmux"
alias tma="tmux attach -t"
alias tmn="tmux new -s"
alias tml='tmux list-sessions'
alias ze="vim $HOME/.zshrc"
alias ve="vim $HOME/.vimrc"
alias nve="nvim $HOME/.vimrc"
alias zs="source $HOME/.zshrc"
alias op="open"
alias kh="k -h"
alias ns="npm start"
alias nb="npm run build"
# start a python http server
alias pyserv="python3 -m http.server 8080"
# weather for various cities
alias weather="wttr Berlin; wttr Marrakesh; wttr Rabat; wttr Paris"

### PROMPT
autoload -U colors && colors
function box_name {
    [ -f ~/.box-name ] && cat ~/.box-name || hostname -s
}
source ~/.git-prompt.sh
setopt PROMPT_SUBST
export GIT_PS1_SHOWDIRTYSTATE=1
export GIT_PS1_SHOWUNTRACKEDFILES=1
export GIT_PS1_SHOWUPSTREAM="auto"
export PROMPT='%{$fg[magenta]%}%n%{$reset_color%}%{$reset_color%}: %{$fg[blue]%}%1~%{$reset_color%}%{$fg[green]%}$(__git_ps1 " (%s)")%{$reset_color%}$ '
local return_status="%{$fg[red]%}%(?..âœ•)%{$reset_color%}"
export RPROMPT='${return_status}%{$reset_color%}'

### GENERAL
# don't add commands that are prepended with a space to history
setopt histignorespace
# vi mode
export EDITOR="nvim"
bindkey -v
export KEYTIMEOUT=1
# vi style incremental search
bindkey '^R' history-incremental-search-backward
bindkey '^S' history-incremental-search-forward
bindkey '^P' history-search-backward
bindkey '^N' history-search-forward

### OTHER

#Change ls colours
LS_COLORS="ow=01;36;40" && export LS_COLORS

#make cd use the ls colours
zstyle ':completion:*' list-colors "${(@s.:.)LS_COLORS}"
autoload -Uz compinit
compinit

### PLUGINS
## Autosuggestions
ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=0"
bindkey '^ ' autosuggest-accept

### FUNCTIONS
# print terminal colors
function print-colors() {
  for i in {0..255} ; do
    printf "\x1b[48;5;%sm%3d\e[0m " "$i" "$i"
    if (( i == 15 )) || (( i > 15 )) && (( (i-15) % 6 == 0 )); then
        printf "\n";
    fi
  done
}
# myi IP address
function myip() {
  ifconfig lo0 | grep 'inet ' | sed -e 's/:/ /' | awk '{print "lo0       : " $2}'
  ifconfig en0 | grep 'inet ' | sed -e 's/:/ /' | awk '{print "en0 (IPv4): " $2 " " $3 " " $4 " " $5 " " $6}'
  ifconfig en0 | grep 'inet6 ' | sed -e 's/ / /' | awk '{print "en0 (IPv6): " $2 " " $3 " " $4 " " $5 " " $6}'
  ifconfig en1 | grep 'inet ' | sed -e 's/:/ /' | awk '{print "en1 (IPv4): " $2 " " $3 " " $4 " " $5 " " $6}'
  ifconfig en1 | grep 'inet6 ' | sed -e 's/ / /' | awk '{print "en1 (IPv6): " $2 " " $3 " " $4 " " $5 " " $6}'
}
function tspl() {
  local projects=""
  local last=false
  for arg; do
    if [ $arg = "and" ]; then
      projects+=" and"
      last=false
      continue
    elif [ $arg = "or" ]; then
      projects+=" or"
      last=false
      continue
    fi
    if [ "$last" = false ]; then
      projects+=" project:$arg"
      last=true
    else
      projects+=" $arg"
    fi
  done
  eval task $projects list
}
# add tasks with specific project
function tspa() {
  task add project:$1 "${@:2}"
}
# create a new react component folder
function mkrc() {
  case "$1" in
    -t)
      name="$2"
      ext="ts"
      ;;
    *)
      if [ $# -ne 1 ]; then
        echo 'Invalid arguments'
        return
      fi
      name="$1"
      ext="js"
  esac
  mkdir "$name"
  touch "${name}/${name}.${ext}x"
  touch "${name}/index.${ext}"
  echo "import ${name} from './${name}';\n\nexport default ${name};\nexport * from './${name}';" > "${name}/index.${ext}"
}
# get weather
function wttr() {
  curl "wttr.in/$1?format=%l:+%c%t+%p+UVI%u+%w+%P\n"
}
